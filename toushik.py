# -*- coding: utf-8 -*-
"""Toushik.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19JYgkkjGb5JrXCOcxbT79IQHjP_eyDyR
"""

# pop-up messages
def draw_pop_ups():
    for i, msg in enumerate(pop_up_messages):
        # Display messages stacked in the middle of the screen
        draw_text(420, 450 - i * 30, msg["text"], GLUT_BITMAP_HELVETICA_18)

def draw_hud():
    # Health bar using TEMPLATE approach
    draw_text(10, 770, f"Health: {player_health}/{player_max_health}")

    # Health bar visualization
    health_bar = "[" + "=" * (player_health // 5) + "-" * ((100 - player_health) // 5) + "]"
    draw_text(10, 750, health_bar)

    # Game stats
    draw_text(10, 730, f"Score: {player_score}")
    draw_text(10, 710, f"Level: {current_level}/3")
    draw_text(10, 690, f"Missiles: {missile_count}/25")
    draw_text(10, 670, f"Nitro: {nitro_count}/{max_nitro}")
    draw_text(10, 650, f"Cars Dodged: {cars_dodged}/{level_configs[current_level]['cars_to_dodge']}")

    # Level timer
    effective_elapsed_time = (time.time() - level_start_time) - total_paused_time
    remaining = level_duration - effective_elapsed_time
    draw_text(10, 630, f"Time: {max(0, remaining):.1f}s")

    # Speed indicator
    effective_speed = player_speed + level_configs[current_level]["player_speed_boost"]
    draw_text(10, 610, f"Speed: {effective_speed}")

    # Controls
    draw_text(800, 770, "Controls:")
    draw_text(800, 750, "A/D - Switch lanes")
    draw_text(800, 730, "Space - Shoot")
    draw_text(800, 710, "N - Nitro")
    draw_text(800, 690, "P - Pause")
    draw_text(800, 670, f"C - Camera: {camera_mode}")

    # Messages
    if game_over:
        draw_text(400, 400, "GAME OVER!", GLUT_BITMAP_HELVETICA_18)
        draw_text(380, 360, f"Final Score: {player_score}")
        # Display High Score on Game Over
        draw_text(380, 340, f"High Score: {high_score}")
        draw_text(350, 300, "Press R to Restart")
    elif game_won:
        draw_text(380, 400, "VICTORY!", GLUT_BITMAP_HELVETICA_18)
        draw_text(360, 360, f"Final Score: {player_score}")
        # Display High Score on Win
        draw_text(360, 340, f"High Score: {high_score}")
        draw_text(350, 300, "Press R to Restart")
    elif paused:
        draw_text(450, 400, "PAUSED", GLUT_BITMAP_HELVETICA_18)

def reset_game():
    global game_over, game_won, current_level, player_health, player_score
    global current_lane, player_x, cars_dodged, nitro_count, missile_count
    global enemy_cars, missiles, powerups, red_obstacles, explosions, boss_car
    global last_time, enemy_spawn_timer, powerup_spawn_timer, level_start_time, player_speed
    global total_paused_time, pause_start_time

    game_over = False
    game_won = False
    current_level = 1
    player_health = player_max_health
    player_score = 0
    current_lane = 2
    player_x = LANES[current_lane]
    cars_dodged = 0
    nitro_count = 2
    missile_count = 25
    player_speed = 300
    boss_car = None

    enemy_spawn_timer = 0
    powerup_spawn_timer = 0

    del enemy_cars[:]
    del missiles[:]
    del powerups[:]
    del red_obstacles[:]
    del explosions[:]
    del pop_up_messages[:]

    last_time = time.time()
    level_start_time = time.time()
    total_paused_time = 0
    pause_start_time = 0

    # Spawn initial enemies in different lanes
    min_enemies = level_configs[current_level]["min_enemies_on_screen"]
    for i in range(min_enemies):
        lane = i % 6
        enemy = EnemyCar(lane)
        enemy.y = 300 + (i * 150)
        enemy_cars.append(enemy)

def keyboardListener(key, x, y):
    global current_lane, player_x, paused, game_started, missile_count, last_shot_time
    global nitro_active, nitro_timer, nitro_count, player_speed, camera_mode
    global pause_start_time, total_paused_time

    if key == b'\r':  # Enter - Start game
        if not game_started:
            game_started = True
            reset_game()
        return

    if not game_started:
        return

    if game_over or game_won:
        if key == b'r' or key == b'R':
            reset_game()
        return

    if key == b'a' or key == b'A':  # Move left
        if current_lane > 0:
            current_lane -= 1
            player_x = LANES[current_lane]
    elif key == b'd' or key == b'D':  # Move right
        if current_lane < 5:
            current_lane += 1
            player_x = LANES[current_lane]
    elif key == b' ':  # Shoot
        current_time = time.time()
        if missile_count > 0 and current_time - last_shot_time > 0.36:
            missiles.append({
                'x': player_x,
                'y': player_y + 40,
                'z': player_z + 10,
                'vy': missile_speed,
                'owner': 'player',
                'damage': 20
            })
            missile_count -= 1
            last_shot_time = current_time
    elif key == b'n' or key == b'N':  # Nitro
        if nitro_count > 0 and not nitro_active:
            nitro_active = True
            nitro_timer = 3.0
            nitro_count -= 1
            player_speed = 300 + level_configs[current_level]["player_speed_boost"] + 200
    elif key == b'p' or key == b'P':  # Pause
        paused = not paused
        # Pause Timer Fix Logic
        if paused:
            pause_start_time = time.time()
        else: # Resuming
            if pause_start_time > 0:
                paused_duration = time.time() - pause_start_time
                total_paused_time += paused_duration
                pause_start_time = 0
    elif key == b'c' or key == b'C':
        if camera_mode == "third_person":
            camera_mode = "first_person"
        else:
            camera_mode = "third_person"

def specialKeyListener(key, x, y):

    global camera_pos
    x_cam, y_cam, z_cam = camera_pos

    # Move camera up (UP arrow key)
    if key == GLUT_KEY_UP:
        z_cam += 10

    # Move camera down (DOWN arrow key)
    if key == GLUT_KEY_DOWN:
        z_cam = max(50, z_cam - 10)

    # moving camera left (LEFT arrow key)
    if key == GLUT_KEY_LEFT:
        x_cam -= 20

    # moving camera right (RIGHT arrow key)
    if key == GLUT_KEY_RIGHT:
        x_cam += 20

    camera_pos = (x_cam, y_cam, z_cam)

def mouseListener(button, state, x, y):

    global paused
    # Left mouse button fires a bullet
    if button == GLUT_LEFT_BUTTON and state == GLUT_DOWN:
        keyboardListener(b' ', x, y)

    # Right mouse button toggles pause
    if button == GLUT_RIGHT_BUTTON and state == GLUT_DOWN:
        keyboardListener(b'p', x, y)


def idle():

    global last_time, road_offset, enemy_spawn_timer, powerup_spawn_timer
    global nitro_timer, nitro_active, player_speed, animation_time

    if not game_started:
        glutPostRedisplay()
        return

    if paused or game_over or game_won:
        last_time = time.time()
        glutPostRedisplay()
        return

    current_time = time.time()
    dt = min(current_time - last_time, 0.1)
    last_time = current_time

    animation_time += dt

    # Update road scrolling
    effective_speed = player_speed + level_configs[current_level]["player_speed_boost"]
    road_offset += effective_speed * dt
    if nitro_active:
        road_offset += 200 * dt

    # Update nitro
    if nitro_active:
        nitro_timer -= dt
        if nitro_timer <= 0:
            nitro_active = False
            player_speed = 300 + level_configs[current_level]["player_speed_boost"]

    # Enemy spawning
    enemy_spawn_timer += dt
    spawn_interval = level_configs[current_level]["spawn_rate"]
    min_enemies = level_configs[current_level]["min_enemies_on_screen"]

    if len(enemy_cars) < min_enemies:
        spawn_interval *= 0.5

    if enemy_spawn_timer > spawn_interval:
        enemy_spawn_timer = 0
        spawn_enemy_car()

        if current_level > 1 and int(animation_time) % 3 == 0:
            spawn_enemy_car()

    # Spawn powerups
    powerup_spawn_timer += dt
    if powerup_spawn_timer > 5:
        powerup_spawn_timer = 0
        spawn_powerup()

    # Spawn Red Obstacles rarely
    if int(animation_time) % 15 == 0 and len(red_obstacles) < 1:

        if int(spawn_counter) % 17 == 0:
             spawn_red_obstacle()


    # Update entities
    for enemy in enemy_cars[:]:
        enemy.update(dt)
    for powerup in powerups[:]:
        powerup.update(dt)
    for obstacle in red_obstacles[:]:
        obstacle.update(dt)

    update_missiles(dt)

    # Update explosions
    for exp in explosions[:]:
        if not exp.update(dt):
            explosions.remove(exp)

    #  Update Pop-up message timers
    for msg in pop_up_messages[:]:
        msg['timer'] -= dt
        if msg['timer'] <= 0:
            pop_up_messages.remove(msg)

    # Check game state
    check_collisions()
    if not game_over and not game_won:
        check_level_completion()

    # TEMPLATE REQUIREMENT
    glutPostRedisplay()

def showScreen():

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    glViewport(0, 0, 1000, 800)

    if not game_started:
        # Menu screen using template approach
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluOrtho2D(0, 1000, 0, 800)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()

        draw_text(300, 550, "CHASE AND BLAZE")
        draw_text(350, 500, "Enhanced 3D Racing Shooter")
        draw_text(380, 450, f"High Score: {high_score}")
        draw_text(300, 400, "Press ENTER to Start")
        draw_text(300, 350, "Controls:")
        draw_text(300, 320, "A/D - Switch Lanes")
        draw_text(300, 290, "SPACE - Shoot Missiles (25 per level)")
        draw_text(300, 260, "N - Use Nitro Boost")
        draw_text(300, 230, "C - Toggle Camera View")
        draw_text(300, 200, "Arrow Keys - Move Camera")
        draw_text(300, 170, "P - Pause Game")
        draw_text(300, 140, "R - Restart when game over")
    else:
        setupCamera()

        # Draw world
        draw_road()
        draw_player_car()

        # Draw enemies
        for enemy in enemy_cars:
            enemy.draw()

        # Draw powerups
        for powerup in powerups:
            powerup.draw()

        #Draw Red Obstacles
        for obstacle in red_obstacles:
            obstacle.draw()

        # Draw missiles using glutSolidCube
        glColor3f(1, 1, 0)
        for missile in missiles:
            glPushMatrix()
            glTranslatef(missile['x'], missile['y'], missile['z'])
            glutSolidCube(6)
            glPopMatrix()

        # Draw explosions
        for explosion in explosions:
            explosion.draw()

        # Draw HUD
        draw_hud()

        #  Draw Pop-ups
        draw_pop_ups()


    glutSwapBuffers()

# MAIN FUNCTION
def main():
    glutInit()
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
    glutInitWindowSize(1000, 800)
    glutInitWindowPosition(0, 0)
    wind = glutCreateWindow(b"Chase and Blaze - Template Compliant")

    # Load high score at start
    load_high_score()

    glutDisplayFunc(showScreen)
    glutKeyboardFunc(keyboardListener)
    glutSpecialFunc(specialKeyListener)
    glutMouseFunc(mouseListener)
    glutIdleFunc(idle)

    glutMainLoop()
if __name__ == "__main__":
    main()